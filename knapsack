#include <stdio.h>

// Helper function to return the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Recursive function to solve the 0/1 Knapsack problem
int knapSack(int W, int wt[], int val[], int n) {
    // Base case: If no items left or capacity is zero
    if (n == 0 || W == 0)
        return 0;

    // If the current item's weight exceeds capacity, skip it
    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);

    // Return the maximum of including or excluding the current item
    else
        return max(
            val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1),
            knapSack(W, wt, val, n - 1)
        );
}

int main() {
    int profit[] = {60, 100, 120};  // Values of items
    int weight[] = {10, 20, 30};    // Weights of items
    int W = 50;                     // Knapsack capacity
    int n = sizeof(profit) / sizeof(profit[0]);  // Number of items

    printf("Maximum value in Knapsack = %d\n", knapSack(W, weight, profit, n));
    return 0;
}
